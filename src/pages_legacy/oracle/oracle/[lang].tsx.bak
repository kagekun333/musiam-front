import { useMemo, useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import OmikujiCard from "@/components/omikuji/OmikujiCard";

type RankObj = { label?: string; rank?: string };
type RankLike = string | RankObj | undefined;

type OmikujiEntry = {
  id: number;
  label?: { short?: string };
  rank?: RankLike;
  poem?: { hanbun?: string[] };
  summary?: string;
  items?: Partial<Record<"wish"|"health"|"lost"|"person"|"houseMove"|"marriage"|"travel", string>>;
};

type Props = {
  lang: "ja" | "en";
  bundle: OmikujiEntry[];
  imageBase: string;
  poemOriginal: Record<number, string[]>;
};

const UI = {
  ja: {
    title: "観音百籤 おみくじ",
    switchLang: "English",
    prev: "← 前へ", next: "次へ →", draw: "一枚引く",
    tabs: { card: "カード", photo: "フォト" },
    search: "番号指定 (1-100)",
    unspecified: "— 記載なし —",
    fields: { wish:"願望", health:"疾病", lost:"遺失物", person:"待人", houseMove:"家・移転", marriage:"婚姻", travel:"旅行" } as const,
  },
  en: {
    title: "Kannon 100 Omikuji",
    switchLang: "日本語",
    prev: "← Prev", next: "Next →", draw: "Draw",
    tabs: { card: "Card", photo: "Photo" },
    search: "Pick (1-100)",
    unspecified: "— Not specified —",
    fields: { wish:"Wish", health:"Illness", lost:"Lost item", person:"Person", houseMove:"House / Move", marriage:"Marriage", travel:"Travel" } as const,
  },
};

function ensure4(arr?: string[]){ const a=(arr ?? []).filter(Boolean); while(a.length<4)a.push(""); return a.slice(0,4); }
function pad3(n:number){ return String(n).padStart(3,"0"); }

const OracleLangPage: NextPage<Props> = ({ lang, bundle, imageBase, poemOriginal }) => {
  const t = UI[lang];
  const router = useRouter();

  // URLクエリでカードを直指定（?render=front|back&id=NN）
  const renderParam = router.query.render as "front" | "back" | undefined;
  const idParamRaw = Array.isArray(router.query.id) ? router.query.id[0] : router.query.id;
  const idParam = Number(idParamRaw);
  const renderOnly = renderParam === "front" || renderParam === "back";

  const [mode, setMode] = useState<"card" | "photo">("card");
  const [idx, setIdx] = useState<number | null>(null);
  const [front, setFront] = useState(true);
  const [cardFace, setCardFace] = useState<"front"|"back">("back");

  useEffect(() => {
    if (!router.isReady) return;
    if (renderOnly && Number.isFinite(idParam)) {
      setIdx(Math.max(0, Math.min(bundle.length - 1, idParam - 1)));
      setCardFace(renderParam!);
    }
  }, [router.isReady, renderOnly, idParam, bundle.length, renderParam]);

  const rec = useMemo(() => (idx == null ? undefined : bundle[idx]), [idx, bundle]);
  const poemJa = rec ? (poemOriginal[rec.id] ?? rec.poem?.hanbun ?? []) : [];

  const drawOne = () => setIdx(Math.floor(Math.random() * bundle.length));
  const prev = () => setIdx(s => (s == null ? 0 : (s - 1 + bundle.length) % bundle.length));
  const next = () => setIdx(s => (s == null ? 0 : (s + 1) % bundle.length));
  const jumpTo = (v: string) => { const n = Number(v); if (Number.isFinite(n) && n >= 1 && n <= bundle.length) setIdx(n - 1); };

  const otherLang = lang === "ja" ? "en" : "ja";
  const n3 = rec ? pad3(rec.id) : "001";
  const frontUrl = `${imageBase}/${n3}/front.jpg`;
  const backUrl = `${imageBase}/${n3}/back.jpg`;

  // エクスポート専用モード：カードだけ出す
  if (renderOnly) {
    return (
      <main style={{ padding: 24 }}>
        {rec ? (
          <OmikujiCard
            entry={rec} lang={lang}
            variant={cardFace}
            poemOriginal={poemJa}
            labels={{ fields: UI[lang].fields as any, unspecified: UI[lang].unspecified }}
          />
        ) : (<div className="text-sm opacity-70">{lang==="ja"?"番号を指定してください。":"Enter a number."}</div>)}
      </main>
    );
  }

  return (
    <main style={{ padding: 24 }}>
      <h1 style={{ fontSize: 24, fontWeight: 700, marginBottom: 12 }}>{t.title} /oracle/{lang}</h1>

      <div style={{ display:"flex", gap:8, alignItems:"center", marginBottom:8 }}>
        <Link href={`/oracle/${otherLang}`}>{UI[otherLang].switchLang}</Link>

        <div className="inline-flex rounded-xl overflow-hidden border">
          <button onClick={() => setMode("card")} className="px-3 py-1 text-sm" style={{ background: mode==="card" ? "#eef2ff" : "white" }}>{t.tabs.card}</button>
          <button onClick={() => setMode("photo")} className="px-3 py-1 text-sm" style={{ background: mode==="photo" ? "#eef2ff" : "white" }}>{t.tabs.photo}</button>
        </div>

        {mode==="card" && (
          <div className="inline-flex rounded-xl overflow-hidden border">
            <button onClick={() => setCardFace("front")} className="px-3 py-1 text-sm" style={{ background: cardFace==="front" ? "#eef2ff" : "white" }}>{lang==="ja"?"表":"Front"}</button>
            <button onClick={() => setCardFace("back")} className="px-3 py-1 text-sm" style={{ background: cardFace==="back" ? "#eef2ff" : "white" }}>{lang==="ja"?"裏":"Back"}</button>
          </div>
        )}
      </div>

      <div className="flex flex-wrap items-center gap-8">
        <div className="flex items-center gap-6">
          <button onClick={prev}> {t.prev} </button>
          <button onClick={drawOne}> 🎴 {t.draw} </button>
          <button onClick={next}> {t.next} </button>
        </div>

        <div className="flex items-center gap-2">
          <label htmlFor="jump">{t.search}</label>
          <input id="jump" type="number" min={1} max={bundle.length} className="w-24 rounded-md border px-2 py-1 text-right"
            onKeyDown={(e) => { if (e.key === "Enter") jumpTo((e.target as HTMLInputElement).value); }} />
        </div>

        {mode === "photo" && rec ? (
          <button onClick={() => setFront(f => !f)} className="rounded-md border px-3 py-1">{lang==="ja"?"表/裏 切替":"Flip"}</button>
        ) : null}
      </div>

      <div className="mt-6 grid grid-cols-1 gap-6 md:grid-cols-2">
        <div>
          {rec ? (
            mode === "card" ? (
              <OmikujiCard
                entry={rec} lang={lang}
                variant={cardFace}
                poemOriginal={poemJa}
                labels={{ fields: UI[lang].fields as any, unspecified: UI[lang].unspecified }}
              />
            ) : (
              <div className="mx-auto w-full max-w-[380px]">
                <div className="relative aspect-[3/5] rounded-[24px] border overflow-hidden bg-neutral-50">
                  {/* eslint-disable-next-line @next/next/no-img-element */}
                  <img src={front ? frontUrl : backUrl} alt={`omikuji ${rec.id} ${front ? "front" : "back"}`} className="w-full h-full object-contain" loading="lazy" />
                </div>
              </div>
            )
          ) : (<div className="h-96 rounded-[24px] border bg-white" />)}
        </div>

        {/* 参考パネル */}
        <div className="rounded-[24px] border bg-white p-5 shadow-sm">
          <h2 className="text-lg font-semibold mb-3">{lang==="ja"?"詩（四句）":"Poem (4 lines)"}</h2>
          <ol className="space-y-1 text-[15px] leading-7">
            {ensure4(poemJa).map((line, i) => (<li key={i} className="font-medium tracking-wide">{line}</li>))}
          </ol>
        </div>
      </div>
    </main>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  return { paths: [{ params: { lang: "ja" } }, { params: { lang: "en" } }], fallback: false };
};

export const getStaticProps: GetStaticProps<Props> = async (ctx) => {
  const lang = (ctx.params?.lang as "ja" | "en") || "ja";
  const mod = await import(`../../../dist/omikuji_bundle.${lang}.json`);
  const bundle = (mod.default ?? mod) as OmikujiEntry[];

  const jaMod = await import(`../../../dist/omikuji_bundle.ja.json`);
  const jaBundle = (jaMod.default ?? jaMod) as OmikujiEntry[];
  const poemOriginal: Record<number, string[]> = {};
  for (const e of jaBundle) poemOriginal[e.id] = e.poem?.hanbun ?? [];

  const imageBase = process.env.NEXT_PUBLIC_OMIKUJI_IMAGE_BASE || "/images/kannon100";
  return { props: { lang, bundle, imageBase, poemOriginal } };
};

export default OracleLangPage;