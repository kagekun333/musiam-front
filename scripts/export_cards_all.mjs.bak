import fs from "node:fs";
import path from "node:path";
import puppeteer from "puppeteer";

const BASE_ROOT = process.env.EXPORT_BASE_ROOT || "http://localhost:3000/oracle";
const OUTDIR    = path.resolve(process.env.EXPORT_OUT || "exports/omikujicard");
const LANGS     = (process.env.LANGS  || "ja,en").split(",").map(s=>s.trim());
const FACES     = (process.env.FACES  || "front,back").split(",").map(s=>s.trim());
const FROM      = Number(process.env.FROM || 1);
const TO        = Number(process.env.TO   || 100);
const WIDTH     = Number(process.env.CARD_WIDTH || 768);
const DPR       = Number(process.env.DPR || 2);
const EXT       = (process.env.EXT || "png").toLowerCase();
const QUALITY   = Number(process.env.QUALITY || 95);

async function ensureDir(p){ await fs.promises.mkdir(p, { recursive: true }); }

async function shot(page, lang, face, id){
  const url = `${BASE_ROOT}/${lang}?render=${face}&id=${id}`;
  await page.goto(url, { waitUntil: "domcontentloaded", timeout: 120_000 });

  await page.waitForSelector("[data-omikuji-card]", { timeout: 30_000 });
  await page.waitForFunction((n)=>{
    const b = document.querySelector("[data-omikuji-card] b");
    return b && b.textContent?.trim() === String(n);
  }, { timeout: 30_000 }, id);

  // ← ここを純JSに
  await page.$eval("[data-omikuji-card] > div", (el, w)=>{
    el.style.maxWidth = "unset";
    el.style.width  = w + "px";
    el.style.height = Math.round((w) * 5 / 3) + "px"; // 3:5
  }, WIDTH);

  const el = await page.$("[data-omikuji-card] > div");
  const filename = `${lang}_${face}_${String(id).padStart(3,"0")}.${EXT}`;
  const file = path.join(OUTDIR, filename);

  if (EXT === "jpg" || EXT === "jpeg") {
    await el.screenshot({ path: file, type: "jpeg", quality: QUALITY });
  } else {
    await el.screenshot({ path: file, type: "png" });
  }
  process.stdout.write(`\rSaved: ${path.relative(process.cwd(), file)}   `);
}

async function run(){
  await ensureDir(OUTDIR);
  const browser = await puppeteer.launch({ headless: true, channel: "chrome" });
  const page = await browser.newPage();
  await page.setViewport({
    width: Math.ceil(WIDTH*1.3),
    height: Math.ceil(WIDTH*1.3*5/3),
    deviceScaleFactor: DPR
  });

  for (const lang of LANGS){
    for (const face of FACES){
      for (let id = FROM; id <= TO; id++){
        try { await shot(page, lang, face, id); }
        catch (e){ console.error(`\n[WARN] failed ${lang}/${face}/${id}:`, e?.message || e); }
      }
    }
  }
  await browser.close();
  console.log("\nDone.");
}
run().catch(e=>{ console.error("\n[export_cards_all] fatal:", e); process.exit(1); });
