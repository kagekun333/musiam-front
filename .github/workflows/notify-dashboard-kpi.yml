name: Notify dashboard to Slack (KPI)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"  # 09:00 JST

permissions:
  contents: read

concurrency:
  group: notify-dashboard-kpi
  cancel-in-progress: true

jobs:
  notify:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
      POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}          # 例: https://eu.posthog.com
      POSTHOG_PROJECT_ID: ${{ secrets.POSTHOG_PROJECT_ID }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      DASHBOARD_URL: ${{ secrets.DASHBOARD_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Fetch KPI (last 24h) via PostHog HogQL
        shell: bash
        run: |
          set -euo pipefail

          ph() {
            local Q="$1"
            echo "=== HogQL ==="
            echo "$Q"
            jq -nc --arg q "$Q" '{"query":{"kind":"HogQLQuery","query":$q}}' \
            | curl -sS -X POST \
                -H "Authorization: Bearer ${POSTHOG_API_KEY}" \
                -H "Content-Type: application/json" \
                "${POSTHOG_HOST}/api/projects/${POSTHOG_PROJECT_ID}/query" \
                --data-raw @-
          }

          # --- CTA breakdown (24h)
          CTA_JSON=$(ph "SELECT properties.cta AS cta, count() AS clicks
                         FROM events
                         WHERE event = 'CTA_CLICK' AND timestamp >= now() - INTERVAL 1 DAY
                         GROUP BY cta
                         ORDER BY clicks DESC")
          echo "::group::RAW CTA_JSON"; echo "$CTA_JSON" | jq .; echo "::endgroup::"

          # --- Rooms Top3（ROOM_ENTER / slug優先＋$pathname/ pathname/ url）
          ROOM_JSON=$(ph "SELECT coalesce(properties.slug, properties.\\$pathname, properties.pathname, properties.url) AS room,
                                 count() AS enters
                          FROM events
                          WHERE event = 'ROOM_ENTER' AND timestamp >= now() - INTERVAL 1 DAY
                          GROUP BY room
                          ORDER BY enters DESC
                          LIMIT 3")
          echo "::group::RAW ROOM_JSON"; echo "$ROOM_JSON" | jq .; echo "::endgroup::"

          # --- 粗CVR（EVENT_CARD_CLICK → /events* の $pageview）
          CVR_JSON=$(ph "SELECT
                           countIf(event = 'EVENT_CARD_CLICK') AS card_clicks,
                           countIf(event = '\\$pageview' AND properties.\\$pathname LIKE '/events%') AS events_pv
                         FROM events
                         WHERE timestamp >= now() - INTERVAL 1 DAY")
          echo "::group::RAW CVR_JSON"; echo "$CVR_JSON" | jq .; echo "::endgroup::"

          # エラーチェック
          for name in CTA_JSON ROOM_JSON CVR_JSON; do
            if echo "${!name}" | jq -e '.error? // empty' >/dev/null; then
              echo "::error::${name} API error: $(echo "${!name}" | jq -r '.error')"
              exit 1
            fi
          done

          # 結果配列（.results または .results.results の両対応）→ 文字列化
          CTA_ROWS=$(echo "$CTA_JSON" | jq -c '(.results.results // .results) // []')
          if [ "$(echo "$CTA_ROWS" | jq 'length')" -gt 0 ]; then
            CTA_LINES=$(echo "$CTA_ROWS" | jq -r '
              map(
                if type=="object" and has("cta") and has("clicks")
                  then "• *\(.cta // \"unknown\")*: \(.clicks // 0)\n"
                elif (type!="object") and (length>=2)
                  then "• *\(.0 // \"unknown\")*: \(.1 // 0)\n"
                else empty
                end
              ) | join("") | if length==0 then "• (no data)\n" else . end')
          else
            CTA_LINES="• (no data)\n"
          fi

          ROOM_ROWS=$(echo "$ROOM_JSON" | jq -c '(.results.results // .results) // []')
          if [ "$(echo "$ROOM_ROWS" | jq 'length')" -gt 0 ]; then
            ROOM_LINES=$(echo "$ROOM_ROWS" | jq -r '
              map(
                if type=="object" and has("room") and has("enters")
                  then "• *\(.room // \"unknown\")*: \(.enters // 0)\n"
                elif (type!="object") and (length>=2)
                  then "• *\(.0 // \"unknown\")*: \(.1 // 0)\n"
                else empty
                end
              ) | join("") | if length==0 then "• (no data)\n" else . end')
          else
            ROOM_LINES="• (no data)\n"
          fi

          CARD_CLICKS=$(echo "$CVR_JSON" | jq -r '
            ((.results.results // .results // [{}])[0] // {})
            | if (type=="object") and has("card_clicks") then (.card_clicks // 0)
              elif (type!="object") and (length>=1) then .[0]
              else 0 end')
          EVENTS_PV=$(echo "$CVR_JSON" | jq -r '
            ((.results.results // .results // [{}])[0] // {})
            | if (type=="object") and has("events_pv") then (.events_pv // 0)
              elif (type!="object") and (length>=2) then .[1]
              else 0 end')
          if [ "${CARD_CLICKS}" -gt 0 ]; then
            CVR=$(awk "BEGIN { printf \"%.1f\", (${EVENTS_PV} / ${CARD_CLICKS}) * 100 }")
          else
            CVR="0.0"
          fi

          # 改行→\n で環境変数化（次ステップで使用）
          CTA_ESC=$(printf "%b" "$CTA_LINES" | sed ':a;N;$!ba;s/\n/\\n/g')
          ROOM_ESC=$(printf "%b" "$ROOM_LINES" | sed ':a;N;$!ba;s/\n/\\n/g')
          {
            echo "CTA_ESC=${CTA_ESC}"
            echo "ROOM_ESC=${ROOM_ESC}"
            echo "CVR=${CVR}"
            echo "CARD_CLICKS=${CARD_CLICKS}"
            echo "EVENTS_PV=${EVENTS_PV}"
          } >> "$GITHUB_ENV"

      - name: Compose Slack payload
        shell: bash
        env:
          DASHBOARD_URL: ${{ secrets.DASHBOARD_URL }}
          REPO: ${{ github.repository }}
          COMMIT: ${{ github.sha }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -euo pipefail
          COMMIT_SHORT=${COMMIT:0:7}
          jq -nc \
            --arg repo "$REPO" \
            --arg run_url "$RUN_URL" \
            --arg commit_short "$COMMIT_SHORT" \
            --arg dash "$DASHBOARD_URL" \
            --arg cta "$CTA_ESC" \
            --arg rooms "$ROOM_ESC" \
            --arg cvr "$CVR" \
            --arg clicks "$CARD_CLICKS" \
            --arg pv "$EVENTS_PV" \
            '{
              text: "MUSIAM — Daily dashboard",
              blocks: [
                { type: "header", text: { type: "plain_text", text: "MUSIAM — Daily dashboard" } },
                { type: "section", fields: [
                    { type: "mrkdwn", text: "*Repo:*\n\($repo)" },
                    { type: "mrkdwn", text: "*Run:*\n<\($run_url)|\($commit_short)>" }
                  ]
                },
                { type: "section", text: { type: "mrkdwn", text: "*Open dashboard:* <\($dash)|PostHog Dashboard>" } },
                { type: "divider" },
                { type: "section", text: { type: "mrkdwn", text: "*CTA (last 24h)*\n\($cta)" } },
                { type: "section", text: { type: "mrkdwn", text: "*Rooms Top3 (ROOM_ENTER, last 24h)*\n\($rooms)" } },
                { type: "context", elements: [
                    { type: "mrkdwn", text: "*EVENT → /events/* PV ratio (rough CVR):* \($cvr)%  (clicks=\($clicks), pv=\($pv))" }
                  ]
                }
              ]
            }' > payload.json
          cat payload.json

      - name: Send to Slack
        shell: bash
        run: |
          set -euo pipefail
          curl -fSs -i -X POST \
            -H 'Content-type: application/json' \
            --data @payload.json \
            "$SLACK_WEBHOOK_URL"
